version: "3.7"

services:
  # 서비스 이름
  spring:
    container_name: spring
    hostname: spring
    # 실행되는 컨텍스트 및 도커파일 지정
    build:
      context: ../
      dockerfile: "./docker/dockerfile/spring.dockerfile"
    ports:
      - "8080:8080"
    restart: "always"
    networks:
      - backend

  mysql:
    container_name: mysql
    hostname: mysql
    build:
      context: ../
      dockerfile: "./docker/dockerfile/mysql.dockerfile"
    networks:
      - backend
    volumes:
      - /home/ubuntu/volume/mysql:/var/lib/mysql
    env_file: "./docker.env"
    expose:
      - "3306"

  flask:
    container_name: flask
    hostname: flask
    build:
      context: ../
      dockerfile: "./docker/dockerfile/flask.dockerfile"
    networks:
      - backend
    volumes:
      - /home/ubuntu/volume/flask:/usr/local/app/
    env_file: "./docker.env"
    expose:
      - "5000"

  elastic:
    build:
      context: ../
      dockerfile: "./docker/dockerfile/elastic-search.dockerfile"
    networks:
      - backend
    env_file: "./docker.env"
    expose:
      - "9200"

  redis:
    image: redis
    networks:
      - backend
    env_file: "./docker.env"
    expose:
      - "6379"
#
  rabbitmq:
    image: rabbitmq
    networks:
      - backend
    volumes:
      - /home/ubuntu/volume/mq:/var/lib/rabbitmq
    env_file: "./docker.env"
    expose:
      - "5672"

  mongo:
    image: mongo
    networks:
      - backend
    volumes:
      - /home/ubuntu/volume/data:/data
    env_file: "./docker.env"
    expose:
      - "27017"

#  setup:
#    build:
#      context: setup/
#      args:
#        ELASTIC_VERSION: ${ELASTIC_VERSION}
#    init: true
#    profiles: ["setup"]
#    volumes:
#      - ./setup/entrypoint.sh:/entrypoint.sh:ro,Z
#      - ./setup/lib.sh:/lib.sh:ro,Z
#      - ./setup/roles:/roles:ro,Z
#    #  - ./bin:/usr/share/elasticsearch/bin # 이 부분이 추가되었습니다.
#    environment:
#      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
#
#      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
#      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
#      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
#      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
#      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
#      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
#      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
#      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
#    networks:
#      - elk
#    depends_on:
#      - elasticsearch
#
#  elasticsearch:
#    build:
#      context: elasticsearch/
#      args:
#        ELASTIC_VERSION: ${ELASTIC_VERSION}
#    volumes:
#      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
#      - elasticsearch:/usr/share/elasticsearch/data:Z
#    ports:
#      - 9200:9200
#      - 9300:9300
#    environment:
#      node.name: elasticsearch
#      ES_JAVA_OPTS: -Xms512m -Xmx512m
#      # Bootstrap password.
#      # Used to initialize the keystore during the initial startup of
#      # Elasticsearch. Ignored on subsequent runs.
#      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
#      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
#      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
#      discovery.type: single-node
#    networks:
#      - elk
#    restart: unless-stopped
#
#  logstash:
#    build:
#      context: logstash/
#      args:
#        ELASTIC_VERSION: ${ELASTIC_VERSION}
#    volumes:
#      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
#      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
#    ports:
#      - 5044:5044
#      - 50000:50000/tcp
#      - 50000:50000/udp
#      - 9600:9600
#    environment:
#      LS_JAVA_OPTS: -Xms256m -Xmx256m
#      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
#    networks:
#      - elk
#    depends_on:
#      - elasticsearch
#    restart: unless-stopped
#
#  kibana:
#    build:
#      context: kibana/
#      args:
#        ELASTIC_VERSION: ${ELASTIC_VERSION}
#    volumes:
#      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
#    ports:
#      - 5601:5601
#    environment:
#      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
#    networks:
#      - elk
#    depends_on:
#      - elasticsearch
#    restart: unless-stopped


# 브리지 네트워크는 도커가 제공하는 네트워크 드라이버 중 하나로, 가상
# 인터페이스를 통해 컨테이너들을 연결한다.
networks:
  backend:
    ipam:
      driver: default
      config:
        - subnet: "172.16.20.0/24"
          gateway: "172.16.20.1"